#!/usr/bin/env python
# expect creds to be configured in ~/.netrc

import sys
from urllib.parse import urlparse, urlunparse
import requests

import cmd

script = r"""
def sout = new StringBuilder(), serr = new StringBuilder()
def proc = ['/bin/bash', '-c', /{command}/].execute()
proc.consumeProcessOutput(sout, serr)
proc.waitForOrKill(60000)
println "$sout$serr"
"""

creds_script = r"""
def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
      com.cloudbees.plugins.credentials.Credentials.class
)

for (c in creds) {
  println(c.id)
  if (c.properties.description) {
    println("   description: " + c.description)
  }
  if (c.properties.username) {
    println("   username: " + c.username)
  }
  if (c.properties.password) {
    println("   password: " + c.password)
  }
  if (c.properties.passphrase) {
    println("   passphrase: " + c.passphrase)
  }
  if (c.properties.secret) {
    println("   secret: " + c.secret)
  }
  if (c.properties.privateKeySource) {
    println("   privateKey: " + c.getPrivateKey())
  }
  println("")
}
"""


class Jenkins(cmd.Cmd):
    _default_prompt = "jenkins >>> "
    prompt = _default_prompt

    def __init__(self, url):
        super().__init__()
        self.current_dir = None
        u = urlparse(url)
        self.url = urlunparse(u._replace(path="/scriptText"))

    def _change_dir(self, cmd):
        if cmd == "cd":
            self.current_dir = None
            return True
        elif cmd.startswith("cd "):
            new_dir = cmd[3:].strip()
            if self.current_dir is None or new_dir.startswith("/"):
                self.current_dir = new_dir
            else:
                self.current_dir += "/" + new_dir
            return True
        return False

    def _prompt(self):
        if self.current_dir is None:
            return self._default_prompt
        return f"jenkins {self.current_dir} >>> "

    def _parse_cmd(self, cmd):
        # escape the slash
        cmd = cmd.replace("/", "\\/")
        if self.current_dir:
            _dir = self.current_dir.replace("/", "\\/")
            return f"cd {_dir} && {cmd}"
        return cmd

    def default(self, cmd):
        if cmd == "exit":
            sys.exit(0)
        elif cmd == "EOF":
            sys.exit(0)
        elif cmd == "dump-creds":
          s = creds_script
        else:
          s = script.format(command=self._parse_cmd(cmd))
        if self._change_dir(cmd):
            Jenkins.prompt = self._prompt()
            return
        x = requests.post(self.url, data={"script": s})
        print(x.text)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("URL required")
        sys.exit()
    Jenkins(sys.argv[1]).cmdloop()
