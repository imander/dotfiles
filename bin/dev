#!/bin/bash

set -e

SELF="$(dirname $0)/$(basename $0)"
DOCKER_CMD="docker run -d --network development"

function help() {
  cat <<EOF

Available images are:
$(grep INSTANCE $SELF | grep -v '$SELF' |
    cut -f2- -d: | column -t | sort |
    while read line; do echo "  $line"; done)

Management options are:
  help - print this help menu and exit
  kill - remove docker container completely
  stop - stop running container

EOF
}

# INSTANCE: splunk (splunk:latest)
function splunk() {
  docker start splunk || $DOCKER_CMD \
    -p 8000:8000 \
    -e "SPLUNK_START_ARGS=--accept-license" \
    -e "SPLUNK_PASSWORD=password" \
    --name splunk \
    splunk/splunk:latest
  echo "splunk running at 127.0.0.1:8000 (admin:password)"
}

# INSTANCE: dvwa (cyberxsecurity/dvwa)
function dvwa() {
  docker start dvwa >/dev/null 2>&1 || $DOCKER_CMD \
    --name dvwa \
    -p 8001:80 \
    cyberxsecurity/dvwa
  echo "DVWA running at 127.0.0.1:8001"
}

# INSTANCE: hackazon (cyberxsecurity/hackazon)
function hackazon() {
  docker start hackazon >/dev/null 2>&1 || $DOCKER_CMD \
    --name hackazon \
    -p 8002:80 \
    cyberxsecurity/hackazon
  echo "hackazon running at 127.0.0.1:8002"
}

# INSTANCE: shellshock (vulnerables/cve-2014-6271)
function shellshock() {
  docker start shellshock >/dev/null 2>&1 || $DOCKER_CMD \
    --name shellshock \
    -p 8003:80 \
    vulnerables/cve-2014-6271
  echo "shellshock running at 127.0.0.1:8003"
}

# INSTANCE: grafana (grafana/grafana:v6.5.0)
function grafana() {
  docker start grafana >/dev/null 2>&1 || $DOCKER_CMD \
    --name grafana \
    -p 8004:3000 \
    grafana/grafana
  echo "Grafana running at 127.0.0.1:8004"
}

# INSTANCE: tflow (jupyter/tensorflow-notebook:latest)
function tflow() {
  docker start tflow ||
    $DOCKER_CMD -p 127.0.0.1:15000:8888 \
      -e JUPYTER_ENABLE_LAB=yes \
      -v "$PWD:/home/jovyan/work:rw" \
      --name tflow \
      jupyter/tensorflow-notebook:latest
  sleep 5
  URL=$(docker logs tflow 2>&1 | egrep -o 'http://127.0.0.1:8888/\?token=[0-9a-f]+' | tail -1)
  echo "Jupyter URL: $URL" | sed 's/8888/15000/'
}

# INSTANCE: r-notebook (jupyter/r-notebook)
function r-notebook() {
  docker start r-notebook ||
    $DOCKER_CMD -p 127.0.0.1:15001:8888 \
      -e JUPYTER_ENABLE_LAB=yes \
      -v "$PWD:/home/jovyan/work:rw" \
      --name r-notebook \
      jupyter/r-notebook
  sleep 5
  URL=$(docker logs r-notebook 2>&1 | egrep -o 'http://127.0.0.1:[0-9]+/\?token=[0-9a-f]+' | tail -1)
  echo "Jupyter URL: $URL" | sed 's/8888/15001/'
}

# INSTANCE: kali (kalilinux/kali-rolling)
function kali() {
  _run_bash kalilinux/kali-rolling kali
}

# INSTANCE: ubuntu (ubuntu:latest)
function ubuntu() {
  _run_bash ubuntu ubuntu
}

# INSTANCE: fedora (fedora:latest)
function fedora() {
  _run_bash fedora fedora
}

# INSTANCE: centos (centos:7)
function centos() {
  _run_bash centos:7 centos
}

# INSTANCE: go11 (golang:1.11)
function go11() {
  _run_bash golang:1.11 go11
}

# INSTANCE: go13 (golang:1.13)
function go13() {
  _run_bash golang:1.13 go13
}

# INSTANCE: ruby (ruby:latest)
function ruby() {
  _run_bash ruby ruby
}

# INSTANCE: b15 (gobuffalo/buffalo:v0.15.1)
function b15() {
  _run_bash gobuffalo/buffalo:v0.15.1 b15
}

# INSTANCE: b13 (gobuffalo/buffalo:v0.13.1)
function b13() {
  _run_bash gobuffalo/buffalo:v0.13.3 b13
}

# INSTANCE: arch (archlinux)
function arch() {
  _run_bash archlinux arch
}

# INSTANCE: python3 (python:3.7)
function python3() {
  _run_bash python:3.7 python3
}

function jupyter() {
  $DOCKER_CMD --rm -p 8888:8888 \
    -e JUPYTER_ENABLE_LAB=yes \
    -v "$PWD":/home/jovyan/work \
    --name jupyter jupyter/datascience-notebook && docker logs -f jupyter
}

# INSTANCE: pod (ubuntu pod in kubernetes)
function pod() {
  cat <<EOF >pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: dev-pod
spec:
  containers:
    - name: ubuntu
      command: ["sleep", "10000"]
      image: ubuntu
EOF
  kubectl apply -f pod.yml
  rm pod.yml
}

function _run_bash() {
  docker start $2 && _shell $2 || _run $@
}

function _shell() {
  docker exec -it $1 /bin/bash
}

function _run() {
  docker run --network development -it --name $2 -v "${PWD}:/data:rw" $1 /bin/bash
}

function dev_stop() {
  if [[ $2 == "all" ]]; then
    docker stop $(docker ps -a -q) 2>/dev/null
  fi

  docker stop $2 2>/dev/null || true
}

function dev_kill() {
  if [[ $2 == "all" ]]; then
    docker kill $(docker ps -a -q)
    docker rm $(docker ps -a -q)
  else
    dev_stop $@
    docker rm $2
  fi
}

# remove stopped containers
function dev_clean() {
  docker rm $(docker ps -a -q) 2>/dev/null
}

trap help ERR

if [[ -z $1 ]]; then
  ubuntu
elif [[ $1 == help ]]; then
  help
elif [[ $1 == kill ]]; then
  dev_kill $@
elif [[ $1 == stop ]]; then
  dev_stop $@
elif [[ $1 == clean ]]; then
  dev_clean
else
  $1 $@
fi
