alias sa='source ~/.alias'

# alias vim='vim -X' # improve startup time by not connecting to x-server
alias vi='vim'
alias vf='vim $(fzf -m)'
alias l='ls -lh'
alias la='ls -lah'
alias ld='ls -dl'
alias ltr='ls -ltrh|tail'
alias c='clear'
if [[ -x "$(command -v rg)" ]]; then
  alias grep='rg'
  export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --ignore-file ~/.fzf.ignore'
fi
alias cd..='cd ..'
alias .='cd ..'
alias ..='cd ../..'
alias ...='cd ../../..'
alias ....='cd ../../../..'
alias docs='cd ~/Documents'
alias dl='cd ~/Downloads'
alias cdl='rm -rf ~/Downloads/*'
alias ipgrep='egrep -o '\''[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'\'''
alias foo='cat > ~/foo'
alias cfoo='cat ~/foo'
alias rfoo='rm ~/foo*'
alias vfoo='vim ~/foo'
alias eip='curl http://ipinfo.io/ip'
alias iip=internal_ip
alias lports='netstat -ant | grep LISTEN'
alias s='source'
alias se='source $HOME/.env'
alias f=ifind
alias da='direnv allow'
alias venv='test -d .venv || python -mvenv .venv && source .venv/bin/activate'
if [[ -x "$(command -v xclip)" ]]; then
  alias pbcopy='xclip -selection clipboard'
fi
alias pandoc='docker run --rm -u "$UID:$GID" -v $(pwd):/data -w /data pandoc/core'
alias serve='python -m http.server'
alias fs="fixssh"

# Automatically set user-agent for curl and wget to Chrome on OS type
if [[ "$(uname -s)" == "Darwin" ]]; then
  export AGENT='Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36'
else
  export AGENT='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36'
fi
alias curl="curl -A '$AGENT'"
alias wget="wget -U '$AGENT'"

# Find biggest directories by disc usage
alias ducks='du -cksh * | sort -rh | head -15'

# git/git-flow aliases
alias gpristine='git reset --hard && git clean -df'
alias ghw='gh repo view -w'
alias gffs='git flow feature start'
alias gfft='git flow feature track'
alias gfrs='git flow release start'
alias gfrt='git flow release track'
alias gfbs='git flow bugfix start'
alias gfbt='git flow bugfix track'
alias gfhs='git flow hotfix start'
alias gfht='git flow hotfix track'
alias gfi='git flow init -d'
alias clean-branches="git branch | egrep -v '(develop|master)'|xargs git branch -D"
alias gitb='git_checkout_branch'

# golang stuff
alias gtest='go test -v --bench . --benchmem'
alias gfind='find . -name "*.go" -not -path "*/vendor/*"'
alias nancy='go list -json -m all | docker run --rm -i sonatypecommunity/nancy:latest sleuth'

# Docker aliases
alias drun='docker run --rm'
alias drund='docker run --rm -d'
alias dstart='docker start'
alias dkill='docker kill'
alias dps='docker ps'
alias dpsa='docker ps -a'
alias dpurge='docker system prune -a -f'

function internal_ip {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    ifconfig| egrep '(^[a-zA-Z]|\sinet[^6])' | egrep -B1 '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | awk -v RS=$'--' 'NF {print $1, $6}'|column -t
  else
    ip addr | egrep -o '(^[0-9]+:\s+[0-9a-z]+|\sinet[^6].*)' | egrep -B1 '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | awk -v RS=$'[0-9]:' 'NF {print $1, $3}' | column -t
  fi
}

function ifind {
  find . -iname "*$1*"
}

# terraform
function tf {
  docker run --rm -it -w /tf -v "$HOME/.aws":/root/.aws -v "$PWD":/tf hashicorp/terraform "$@" -auto-approve
}

function git_checkout_branch {
  branches=( $(git branch --format '%(refname:lstrip=2)') )
  i=0
  if [[ "$(ps -p $$ -oargs=)" == *"zsh"* ]]; then
    i=1
  fi
  for branch in ${branches[@]}; do
    echo -e "[$i]\t$branch"
    i=$((i+1))
  done

  echo -n "Choice: "
  read branch_choice
  git checkout "${branches[$branch_choice]}"
}

function ldap-time {
  t=$(($1/10000000)) # divide by 10 000 000 to get seconds
  t=$(($t-11644473600)) # 1.1.1600 -> 1.1.1970 difference in seconds

  if [[ "$OSTYPE" == "darwin"* ]]; then
    date -r $t
  else
    date -d @$t
  fi
}

# convert https git remotes to ssh
function gssh {
  git remote -v | awk '{print $1,$2}' | uniq | while read repo; do
    url=$(awk '{print $2}' <<<$repo)
    remote=$(awk '{print $1}' <<<$repo)
    if [[ $url == https* ]]; then
      ssh_repo=$(sed -e 's|https://|git@|' -e 's|/|:|' <<<$url)
      git remote remove "$remote"
      git remote add "$remote" "$ssh_repo"
    fi
  done
}

# fix ssh variables when connecting through tmux
function fixssh() {
  eval $(tmux show-env -s |grep '^SSH_')
}
